# microservice specific routes

POST          /register-scheme                                  controllers.SchemeController.registerScheme
POST          /update-scheme                                    controllers.SchemeController.updateScheme
GET           /list-of-schemes                                  controllers.SchemeController.listOfSchemes
GET           /if-list-of-schemes                               controllers.SchemeIFController.listOfSchemes

GET           /scheme                                           controllers.SchemeDetailsController.getSchemeDetails
GET           /psp-scheme                                       controllers.SchemeDetailsController.getPspSchemeDetails

# answers caching in protected mongo
GET           /journey-cache/scheme-subscription/:id            controllers.cache.SchemeSubscriptionJourneyCacheController.get(id: String)
POST          /journey-cache/scheme-subscription/:id            controllers.cache.SchemeSubscriptionJourneyCacheController.save(id: String)
DELETE        /journey-cache/scheme-subscription/:id            controllers.cache.SchemeSubscriptionJourneyCacheController.remove(id: String)


# answers caching in protected mongo
GET           /journey-cache/update-scheme/:id                  controllers.cache.UpdateSchemeJourneyCacheController.get(id: String)
POST          /journey-cache/update-scheme/:id                  controllers.cache.UpdateSchemeJourneyCacheController.save(id: String)
DELETE        /journey-cache/update-scheme/:id                  controllers.cache.UpdateSchemeJourneyCacheController.remove(id: String)

# scheme details lock caching in protected mongo
GET           /update-scheme/get-lock                           controllers.cache.SchemeVarianceLockCacheController.getLock()
GET           /update-scheme/get-lock-by-psa                    controllers.cache.SchemeVarianceLockCacheController.getLockByPsa()
GET           /update-scheme/get-lock-by-scheme                 controllers.cache.SchemeVarianceLockCacheController.getLockByScheme()
GET           /update-scheme/isLockByPsaOrScheme                controllers.cache.SchemeVarianceLockCacheController.isLockByPsaIdOrSchemeId()
POST          /update-scheme/lock                               controllers.cache.SchemeVarianceLockCacheController.lock()
DELETE        /update-scheme/release-lock                       controllers.cache.SchemeVarianceLockCacheController.releaseLock()


# scheme details read only caching in protected mongo
GET           /journey-cache/scheme-details/:id                 controllers.cache.SchemeDetailsJourneyCacheController.get(id: String)
POST          /journey-cache/scheme-details/:id                 controllers.cache.SchemeDetailsJourneyCacheController.save(id: String)
DELETE        /journey-cache/scheme-details/:id                 controllers.cache.SchemeDetailsJourneyCacheController.remove(id: String)

POST          /email-response/*id                               controllers.EmailResponseController.retrieveStatus(id: String)

GET           /is-psa-associated                                controllers.AssociatedPsaController.isPsaAssociated